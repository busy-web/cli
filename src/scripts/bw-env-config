#!/usr/bin/env node

require('../initializer');
const { reject } = require('rsvp');
const colors = require('colors');
const path = require('path');
const logger = loader('utils/logger');
const { read, write } = loader('utils/file-io');
const { get, set } = loader('utils/object');

function getData(file, reg) {
	const str = file.replace(reg, '$4');
	return JSON.parse(unescape(str));
}

function setData(file, json, reg) {
	const resStr = escape(JSON.stringify(json));
	return file.replace(reg, `$1$3${resStr}$5`);
}

function injectProperties(json, args) {
	let missing = [];
	args.forEach((arg, idx) => {
		if (arg.hasOwnProperty(idx)) {
			let [ appvar, envvar ] = arg.split(':');
			let hasProps = true;
			if (get(process.env, envvar) === undefined) {
				logger.warn(`env variable could not be found for ${envvar}`);
				missing.push(envvar);
				hasProps = false;
			} else if (!get(this, 'program.allowNull') && (get(process.env, envvar) === null || get(process.env, envvar) === 'null')) {
				logger.warn(`env variable 'null' is not allowed for ${envvar}`);
				missing.push(envvar);
				hasProps = false
			}
			
			if (get(json, appvar) === undefined) {
				logger.warn(`app variable could not be found for ${appvar}`);
				missing.push(appvar);
				hasProps = false;
			}
			
			if (hasProps) {	
				logger.write(colors.green('  *'), `env ${envvar} => ${appvar}:`, colors.yellow.italic(get(process.env, envvar)));
				set(json, appvar, get(process.env, envvar));
			} else if (process.__busyweb.debug) {
				logger.debug(`${appvar}: ${get(json, appvar)}`);
				logger.debug(`${envvar}: ${get(process.env, envvar)}`);
			}
		}
	});
	return missing;
}


function config(argv) {

	// get file name and path
	const cwd = process.cwd();
	const pathname = get(this, 'program.path') || '';
	const filename = get(this, 'program.file') || 'index.html';
	const filePath = path.join(cwd, pathname, filename);

	if (process.__busyweb.debug) {
		logger.debug('path', pathname);
		logger.debug('file', filename);
		logger.debug('fullpath', filePath);
	}

	// create regex to find env data in file
	const meta = "config\/environment"; // eslint-disable-line no-useless-escape
	const reg = new RegExp(`^(((?!${meta})[\\s\\S])*)(${meta}" content=")([^"]*)([\\s\\S]*)$`, 'g');

	logger.info("Reading file [ " + filePath + " ] ...");

	// read file
	return read(filePath).then(fin => {
		// convert file-in to json data
		const json = getData.call(this, fin, reg);

		logger.info("Inject env settings into app config settings...");

		// inject new env variables into json data
		const missing = injectProperties.call(this, json, argv);

		logger.info("Writind injected data to file...");

		// reject promise if the require flag is set and missing params exist
		if (get(this, 'program.require') && missing.length > 0) {
			// add null to reject string if allowNull flag is passed in.
			let nullable = (!get(this, 'program.allowNull') ? 'or null ' : '' );
			return reject(`undefined ${nullable}env variables are not allowed`);
		} 
		
		// replace the meta content in fin with the new json data
		let fout = setData.call(this, fin, json, reg);

		// write out the new file
		return write(filePath, fout).then(() => "Config settings saved.").catch((err) => {
			if (process.__busyweb.debug) { logger.debug("[ WRITEFILE ]", err); }
			return reject(err);
		});
	}).catch((err) => {
		if (process.__busyweb.debug) { logger.debug("[ READFILE ERR ]", err); }
		return reject(err); //`${filename} not found in ${path.join(cwd, pathname)}`);
	});
}


// handle module exports if this is
// loaded with commander or require
if (module && module.parent) {
	// export command
	module.exports = config;
} else {
	// run command
	config.call(this, process.argv.slice(2))
		.then(msg => logger.info(msg))
		.catch(err => {
			throw new Error(err);
		});
}

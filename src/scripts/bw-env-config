#!/usr/bin/env node

require('../initializer');
const RSVP = require('rsvp');
const colors = require('colors');
const path = require('path');
const fs = require('fs');
const logger = loader('utils/logger');

function config(argv) {
	function get(target, key) {
		let args = key.split('.');
		let value = target;
		args.forEach(k => {
			if (value[k] !== undefined) {
				value = value[k];
			} else {
				value = null;
				return;
			}
		});
		return value;
	}

	function set(target, key, value) {
		let keys = key.split('.');
		let child = keys.pop();
		let parent = keys.join('.');
		let pVal = get(target, parent);
		if (pVal && typeof pVal === 'object') {
			pVal[child] = value;
		} else {
			throw new Error('Error: the target at path key was not found or was not an object.');
		}
	}

	const cwd = process.cwd();
	const meta = `config\/environment`; // eslint-disable-line no-useless-escape
	const pathname = (this.program && this.program.path) || '';
	const filename = (this.program && this.program.file) || 'index.html';

	const filePath = path.join(cwd, pathname, filename);
	return new RSVP.Promise((resolve, reject) => {
		fs.readFile(filePath, 'UTF-8', (err, data) => {
			if (err) {
				reject(`${filename} not found in ${path.join(cwd, pathname)}`);
				return;
			}

			const reg = new RegExp(`^(((?!${meta})[\\s\\S])*)(${meta}" content=")([^"]*)([\\s\\S]*)$`, 'g');
			const str = data.replace(reg, '$4');
			const json = JSON.parse(unescape(str));

			const noMissing = (this.program && this.program.require);
			let missingEM, missingDM
			argv.forEach(function(arg, idx) {
				if (arg.hasOwnProperty(idx)) {
					let [ em, dm ] = arg.split(':');
					let emVal = get(json, em);
					let dmVal = process.env[dm];

					if (!dmVal) {
						if (noMissing) {
							missingDM = dm;
							return;
						} else {
							logger.warn(`[ ${missingDM} ] ENV variable not found`);
						}
					}

					if (!emVal) {
						if (noMissing)	{
							missingEM = em;
							return;
						} else {
							logger.warn(`[ ${missingEM} ] not found in application config`);
						}
					}
							
					logger.write(colors.green('  *'), `env ${dm} => ${em}:`, colors.yellow.italic(dmVal));

					set(json, em, dmVal);
				}
			});

			if (missingEM) {
				reject(`[ ${missingEM} ] not found in application config`);
				return;
			}
			
			if (missingDM) {
				reject(`[ ${missingDM} ] ENV variable not found`);
				return;
			}

			const resStr = escape(JSON.stringify(json));
			data = data.replace(reg, `$1$3${resStr}$5`);
			fs.writeFile(filePath, data, function(err) {
				if (err) {
					reject(err);
					return;
				}
				resolve("Config settings changed!");
			});
		});
	});
}

if (module && module.parent) {
	// export command
	module.exports = config;
} else {
	// run command
	config(process.argv.slice(2))
		.then(msg => logger.info(msg))
		.catch(err => {
			throw new Error(err);
		});
}
